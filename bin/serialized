#! /bin/bash

# reactive-firewall/XCMBuild Tool
# ..................................
# Copyright (c) 2023, Mr. Walls
# ..................................
# Licensed under APACHE-2 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# ..........................................
# http://www.apache.org/licenses/LICENSE-2.0
# ..........................................
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################


function safetyCheckSerialized() {
	if [[ -z ${SCRIPT_INPUT_FILE_COUNT} ]] || [[ -z ${SCRIPT_OUTPUT_FILE_COUNT} ]] ; then
		echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: failed to validate serialized script mode. ( unsupported integration )" 1>&2 ;
		echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: warning: expected serialized script mode. ( unsupported integration ) Hint: Try 'SCRIPT_INPUT_FILE_COUNT=1 ; SCRIPT_OUTPUT_FILE_COUNT=1 ; SCRIPT_INPUT_FILE_0=\${1} ; SCRIPT_OUTPUT_FILE_0=\${2} ; $0 ;' instead?" 1>&2 ;
		false ;
	else
		if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -gt 1 ) ]] || [[ ( ${SCRIPT_INPUT_FILE_COUNT} -lt 0 ) ]] ; then
			echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: failed to validate serialized input. ( unsupported input )" 1>&2 ;
			if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -lt 0 ) ]] ; then
				echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: Negitive inputs makes no sense! ( garbage input )" 1>&2 ;
			fi ;
			false ;
			if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -gt 1 ) ]] ; then
				echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: warning: No more than a single input was expected. ( input overload )" 1>&2 ;
			fi ;
		fi ;
		if [[ ( ${SCRIPT_OUTPUT_FILE_COUNT} -gt 1 ) ]] || [[ ( ${SCRIPT_OUTPUT_FILE_COUNT} -lt 0 ) ]] ; then
			echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: failed to validate serialized output. ( unsupported output )" 1>&2 ;
			false ;
		fi ;
		true ;
	fi ;
}

export -f safetyCheckSerialized ;


# logic:
# check if $# is even
# branch on true and assume (in1,out1 ... in-n,out-n) style
# on branch TODO ....
# else if $# is odd check that $1 is a file (abort if missing)
# branch if $1 is a file
# on branch run $0 in-n out-n from n=1 until n>($#/2)
# function autoVectorTypeSPMD()
# usage autoVectorTypeSPMD CMD SRC1 DST1 ...

function autoSerializeArgsAsToFrom() {
	false;
	return ;
	if [[ ( $# -ne 2 ) ]] || [[ -z ${1} ]] || [[ -z ${2} ]] ; then
		echo "${FUNCNAME[${BASH_SHLVL:-0}]:-$0}:${BASH_LINENO:-0}: note: expected serialized script mode. ( attempting ${FUNCNAME:-$_} )" 1>&2 ;
		fn_do_cmd "SCRIPT_INPUT_FILE_COUNT=1 ; SCRIPT_OUTPUT_FILE_COUNT=1 ; SCRIPT_INPUT_FILE_0=${1} ; SCRIPT_OUTPUT_FILE_0=${2} ; $0 ; exit $? ;" ; wait ; exit $? ;
	else
		if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -gt 1 ) ]] || [[ ( ${SCRIPT_INPUT_FILE_COUNT} -lt 0 ) ]] ; then
			echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: failed to validate serialized input. ( unsupported input )" 1>&2 ;
			if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -lt 0 ) ]] ; then
				echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: Negitive inputs makes no sense! ( garbage input )" 1>&2 ;
			fi ;
			false ;
			if [[ ( ${SCRIPT_INPUT_FILE_COUNT} -gt 1 ) ]] ; then
				echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: warning: No more than a single input was expected. ( input overload )" 1>&2 ;
			fi ;
		fi ;
		if [[ ( ${SCRIPT_OUTPUT_FILE_COUNT} -gt 1 ) ]] || [[ ( ${SCRIPT_OUTPUT_FILE_COUNT} -lt 0 ) ]] ; then
			echo "${FUNCNAME:-$0}:${BASH_LINENO:-0}: error: failed to validate serialized output. ( unsupported output )" 1>&2 ;
			false ;
		fi ;
		true ;
	fi ;
}

# source to include
